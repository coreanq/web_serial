# Task ID: 14
# Title: Implement Detailed Packet Inspector
# Status: pending
# Dependencies: 4, 6
# Priority: medium
# Description: Create a detailed packet inspector view that shows comprehensive information about selected packets with byte-level analysis.
# Details:
1. Create a modal or side panel for detailed packet inspection
2. Implement byte-by-byte breakdown of packet structure
3. Add hex and decimal value display
4. Show ASCII representation where applicable
5. Provide detailed Modbus interpretation
6. Add packet comparison functionality for two selected packets
7. Implement copy and export options for selected packet

Packet inspector component:
```javascript
function PacketInspector({ packet }) {
  if (!packet) return null;
  
  const { rawData, parsedData, direction, timestamp, interpretation } = packet;
  
  // Extract packet components based on Modbus-RTU structure
  const slaveAddress = parsedData.slaveAddress;
  const functionCode = parsedData.functionCode;
  const data = parsedData.data;
  const crc = parsedData.crc;
  const calculatedCRC = calculateCRC16(rawData.slice(0, -2));
  const isCRCValid = calculatedCRC === crc;
  
  return (
    <div className="packet-inspector p-3">
      <h5>Packet Details</h5>
      
      <div className="mb-3">
        <div className="fw-bold">Overview</div>
        <div>Timestamp: {new Date(timestamp).toLocaleString()}</div>
        <div>Direction: {direction}</div>
        <div>Length: {rawData.length} bytes</div>
        <div className={isCRCValid ? 'text-success' : 'text-danger'}>
          CRC: {crc.toString(16).padStart(4, '0')} 
          {isCRCValid ? '(Valid)' : `(Invalid, expected: ${calculatedCRC.toString(16).padStart(4, '0')})`}
        </div>
      </div>
      
      <div className="mb-3">
        <div className="fw-bold">Modbus Structure</div>
        <div>Slave Address: {slaveAddress} (0x{slaveAddress.toString(16).padStart(2, '0')})</div>
        <div>Function Code: {functionCode} (0x{functionCode.toString(16).padStart(2, '0')})</div>
        <div>Data: {Array.from(data).map(b => b.toString(16).padStart(2, '0')).join(' ')}</div>
      </div>
      
      <div className="mb-3">
        <div className="fw-bold">Interpretation</div>
        <div>{interpretation}</div>
      </div>
      
      <div className="mb-3">
        <div className="fw-bold">Raw Data</div>
        <div className="byte-grid">
          {Array.from(rawData).map((byte, index) => (
            <div key={index} className="byte-cell">
              <div className="byte-index">{index}</div>
              <div className="byte-hex">{byte.toString(16).padStart(2, '0')}</div>
              <div className="byte-dec">{byte}</div>
              <div className="byte-ascii">{byte >= 32 && byte <= 126 ? String.fromCharCode(byte) : '.'}</div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
```

# Test Strategy:
1. Test with various packet types and structures
2. Verify correct byte-level breakdown
3. Test CRC validation display
4. Verify Modbus interpretation accuracy
5. Test packet comparison functionality
6. Verify copy and export options
