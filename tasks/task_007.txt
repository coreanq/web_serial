# Task ID: 7
# Title: Implement Log Viewer UI
# Status: done
# Dependencies: 1, 4
# Priority: medium
# Description: Create the main log viewer interface for displaying Modbus packets with filtering and control options.
# Details:
1. Create the main log viewer UI with table layout
2. Implement control bar with filtering options
3. Add packet display with HEX and ASCII representation
4. Implement auto-scroll functionality
5. Add clear, copy, and export buttons

Example implementation:
```javascript
// logViewerUI.js
export class LogViewerUI {
  constructor() {
    this.packets = [];
    this.autoScroll = true;
    this.filterType = 'all'; // 'all', 'tx', 'rx'
    
    // Cache DOM elements
    this.mainContent = document.querySelector('.main-content');
    
    // Initialize UI
    this._createUI();
    this._attachEventListeners();
  }

  _createUI() {
    this.mainContent.innerHTML = `
      <div class="p-3 log-viewer">
        <div class="control-bar d-flex flex-wrap align-items-center mb-3">
          <div class="me-3 mb-2">
            <label for="packetTimeout" class="form-label small mb-0">Packet Timeout (ms)</label>
            <input type="number" class="form-control form-control-sm" id="packetTimeout" value="50" min="10" max="1000">
          </div>
          
          <div class="me-3 mb-2">
            <label for="logType" class="form-label small mb-0">Log Type</label>
            <select class="form-select form-select-sm" id="logType">
              <option value="all" selected>All</option>
              <option value="tx">TX</option>
              <option value="rx">RX</option>
            </select>
          </div>
          
          <div class="form-check me-3 mb-2">
            <input class="form-check-input" type="checkbox" id="autoScroll" checked>
            <label class="form-check-label small" for="autoScroll">Auto Scroll</label>
          </div>
          
          <button id="clearBtn" class="btn btn-sm btn-outline-secondary me-2 mb-2">Clear</button>
          <button id="copyBtn" class="btn btn-sm btn-outline-secondary me-2 mb-2">Copy</button>
          <button id="exportBtn" class="btn btn-sm btn-outline-secondary me-2 mb-2">Export</button>
          <button id="optionsBtn" class="btn btn-sm btn-outline-secondary me-2 mb-2">System Options</button>
          <button id="quickSendBtn" class="btn btn-sm btn-outline-primary mb-2">Quick Send</button>
        </div>
        
        <div class="log-container bg-dark p-2 rounded" style="height: calc(100vh - 250px); overflow-y: auto;">
          <table class="table table-dark table-hover table-sm log-table">
            <thead>
              <tr>
                <th width="30"><input type="checkbox" id="selectAll"></th>
                <th width="80">Time</th>
                <th width="50">Dir</th>
                <th width="60">Slave</th>
                <th width="80">Function</th>
                <th>Data (HEX)</th>
                <th width="80">CRC</th>
                <th width="60">Status</th>
              </tr>
            </thead>
            <tbody id="logTableBody">
              <!-- Log entries will be inserted here -->
            </tbody>
          </table>
        </div>
        
        <div class="message-input-area mt-3">
          <div class="input-group">
            <textarea class="form-control" id="messageInput" rows="2" placeholder="Enter message to send..."></textarea>
            <button class="btn btn-primary" id="sendBtn">Send</button>
          </div>
          
          <div class="d-flex flex-wrap mt-2">
            <div class="form-check me-3">
              <input class="form-check-input" type="checkbox" id="appendCRLF">
              <label class="form-check-label small" for="appendCRLF">Append CRLF</label>
            </div>
            
            <div class="form-check me-3">
              <input class="form-check-input" type="checkbox" id="hexSend">
              <label class="form-check-label small" for="hexSend">HEX Send</label>
            </div>
            
            <div class="form-check me-3">
              <input class="form-check-input" type="checkbox" id="loopSend">
              <label class="form-check-label small" for="loopSend">Loop Send</label>
            </div>
            
            <div class="me-3">
              <label for="sendInterval" class="form-label small mb-0">Send Interval (ms)</label>
              <input type="number" class="form-control form-control-sm" id="sendInterval" value="1000" min="100">
            </div>
          </div>
        </div>
      </div>
    `;
    
    // Cache new DOM elements
    this.logTableBody = document.getElementById('logTableBody');
    this.logContainer = document.querySelector('.log-container');
    this.packetTimeoutInput = document.getElementById('packetTimeout');
    this.logTypeSelect = document.getElementById('logType');
    this.autoScrollCheckbox = document.getElementById('autoScroll');
    this.clearBtn = document.getElementById('clearBtn');
    this.copyBtn = document.getElementById('copyBtn');
    this.exportBtn = document.getElementById('exportBtn');
    this.messageInput = document.getElementById('messageInput');
    this.sendBtn = document.getElementById('sendBtn');
    this.hexSendCheckbox = document.getElementById('hexSend');
    this.appendCRLFCheckbox = document.getElementById('appendCRLF');
    this.loopSendCheckbox = document.getElementById('loopSend');
    this.sendIntervalInput = document.getElementById('sendInterval');
  }

  _attachEventListeners() {
    // Auto scroll toggle
    this.autoScrollCheckbox.addEventListener('change', (e) => {
      this.autoScroll = e.target.checked;
    });
    
    // Log type filter
    this.logTypeSelect.addEventListener('change', () => {
      this.filterType = this.logTypeSelect.value;
      this._refreshLogView();
    });
    
    // Clear button
    this.clearBtn.addEventListener('click', () => {
      this.packets = [];
      this.logTableBody.innerHTML = '';
    });
    
    // Copy button
    this.copyBtn.addEventListener('click', () => {
      const text = this.packets.map(p => {
        const direction = p.direction === 'TX' ? 'TX' : 'RX';
        const hex = Array.from(p.rawData).map(b => b.toString(16).padStart(2, '0')).join(' ');
        return `${direction}: ${hex}`;
      }).join('\n');
      
      navigator.clipboard.writeText(text).then(() => {
        alert('Log copied to clipboard');
      }).catch(err => {
        console.error('Failed to copy: ', err);
      });
    });
    
    // Export button
    this.exportBtn.addEventListener('click', () => {
      const data = JSON.stringify(this.packets, null, 2);
      const blob = new Blob([data], { type: 'application/json' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `modbus-log-${new Date().toISOString().replace(/[:.]/g, '-')}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
  }

  addPacket(packet) {
    this.packets.push(packet);
    
    // Apply filter
    if (this.filterType === 'all' || 
        (this.filterType === 'tx' && packet.direction === 'TX') || 
        (this.filterType === 'rx' && packet.direction === 'RX')) {
      this._addPacketToTable(packet);
    }
  }

  _addPacketToTable(packet) {
    const { timestamp, direction, rawData, parsedData, interpretation } = packet;
    const { slaveAddress, functionCode, data, crc, isValid } = parsedData;
    
    const row = document.createElement('tr');
    row.className = direction === 'TX' ? 'table-primary' : 'table-success';
    row.innerHTML = `
      <td><input type="checkbox" class="packet-select"></td>
      <td>${timestamp.toLocaleTimeString()}</td>
      <td>${direction}</td>
      <td>${slaveAddress}</td>
      <td>${functionCode} (0x${functionCode.toString(16).padStart(2, '0')})</td>
      <td>${Array.from(data).map(b => b.toString(16).padStart(2, '0')).join(' ')}</td>
      <td>${crc.toString(16).padStart(4, '0')}</td>
      <td>${isValid ? 'Valid' : 'Error'}</td>
    `;
    
    // Add tooltip with interpretation
    row.title = interpretation;
    
    // Add click handler to show details
    row.addEventListener('click', () => {
      alert(interpretation);
    });
    
    this.logTableBody.appendChild(row);
    
    // Auto scroll if enabled
    if (this.autoScroll) {
      this.logContainer.scrollTop = this.logContainer.scrollHeight;
    }
  }

  _refreshLogView() {
    this.logTableBody.innerHTML = '';
    
    this.packets.forEach(packet => {
      if (this.filterType === 'all' || 
          (this.filterType === 'tx' && packet.direction === 'TX') || 
          (this.filterType === 'rx' && packet.direction === 'RX')) {
        this._addPacketToTable(packet);
      }
    });
  }

  getPacketTimeout() {
    return parseInt(this.packetTimeoutInput.value);
  }
}
```

# Test Strategy:
1. Test UI rendering in different browsers
2. Verify packet display with various Modbus packets
3. Test filtering functionality (All/TX/RX)
4. Verify auto-scroll behavior
5. Test clear, copy, and export functions
6. Verify HEX and ASCII representation accuracy
7. Test with large numbers of packets for performance
8. Verify responsive layout on different screen sizes
