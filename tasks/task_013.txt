# Task ID: 13
# Title: Implement Packet Filtering and Search
# Status: pending
# Dependencies: 6, 7
# Priority: medium
# Description: Create advanced filtering and search capabilities for the packet log, allowing users to find specific packets based on various criteria.
# Details:
1. Implement filter criteria:
   - By direction (TX/RX)
   - By slave address
   - By function code
   - By timestamp range
   - By packet content
   - By error status
2. Create a filter UI component
3. Implement real-time filtering
4. Add search functionality with highlighting
5. Create filter presets and saved filters
6. Implement filter history

Filter implementation example:
```javascript
function filterPackets(packets, filters) {
  return packets.filter(packet => {
    // Direction filter
    if (filters.direction && filters.direction !== 'all' && 
        packet.direction !== filters.direction) {
      return false;
    }
    
    // Slave address filter
    if (filters.slaveAddress && 
        packet.parsedData.slaveAddress !== parseInt(filters.slaveAddress)) {
      return false;
    }
    
    // Function code filter
    if (filters.functionCode && 
        packet.parsedData.functionCode !== parseInt(filters.functionCode)) {
      return false;
    }
    
    // Error status filter
    if (filters.errorStatus === 'valid' && !packet.parsedData.isValid) {
      return false;
    } else if (filters.errorStatus === 'invalid' && packet.parsedData.isValid) {
      return false;
    }
    
    // Timestamp range filter
    if (filters.startTime && packet.timestamp < filters.startTime) {
      return false;
    }
    if (filters.endTime && packet.timestamp > filters.endTime) {
      return false;
    }
    
    // Content search
    if (filters.searchText) {
      const searchRegex = new RegExp(filters.searchText, 'i');
      const dataHex = Array.from(packet.rawData)
        .map(b => b.toString(16).padStart(2, '0'))
        .join(' ');
      
      if (!searchRegex.test(dataHex) && !searchRegex.test(packet.interpretation)) {
        return false;
      }
    }
    
    return true;
  });
}
```

# Test Strategy:
1. Test filtering with various criteria combinations
2. Verify search functionality with different patterns
3. Test performance with large datasets
4. Verify filter UI updates
5. Test saved filters and presets
6. Verify filter history functionality
