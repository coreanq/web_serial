# 제품 요구사항 문서 (PRD) - Modbus-RTU Serial Monitor

## Overview
Modbus-RTU Serial Monitor는 Web Serial API를 활용한 웹 기반 시리얼 통신 모니터링 도구입니다. 이 도구는 산업 자동화 분야에서 널리 사용되는 Modbus-RTU 프로토콜의 통신 패킷을 실시간으로 모니터링하고 분석할 수 있도록 설계되었습니다. 

주요 대상 사용자는 산업 자동화 엔지니어, 시스템 통합 개발자, 그리고 Modbus 장비를 다루는 기술자들입니다. 이 도구는 복잡한 설치 과정 없이 웹 브라우저에서 바로 사용할 수 있어, 현장에서 빠른 문제 해결과 디버깅이 가능합니다.

## Core Features

### 1. Web Serial API 기반 시리얼 포트 관리
- 사용자가 웹 브라우저에서 직접 시리얼 포트를 선택하고 연결할 수 있습니다
- 연결된 포트의 상태를 실시간으로 표시합니다
- 통신 파라미터(Baud Rate, Data Bits, Stop Bits, Parity) 설정 기능을 제공합니다
- 포트 연결/해제를 안전하게 처리하며, 예외 상황에 대한 적절한 에러 메시지를 표시합니다

### 2. Modbus-RTU 패킷 파싱 및 분석
- 수신된 바이너리 데이터를 Modbus-RTU 프로토콜에 따라 자동으로 파싱합니다
- 패킷의 구성 요소(슬레이브 주소, 기능 코드, 데이터, CRC)를 개별적으로 표시합니다
- CRC 검증을 통해 패킷의 무결성을 확인하고 오류를 표시합니다
- 타임아웃 기반으로 패킷을 구분하여 정확한 프레임 경계를 식별합니다

### 3. 실시간 모니터링 인터페이스
- 송수신 패킷을 시간순으로 표시하는 로그 뷰어를 제공합니다
- 각 패킷의 방향(송신/수신), 타임스탬프, 원시 데이터를 표시합니다
- 패킷 내용을 HEX와 ASCII 형식으로 동시에 표시합니다
- 필터링 기능으로 특정 슬레이브 주소나 기능 코드만 표시할 수 있습니다

### 4. Modbus 기능 코드 해석
- 표준 Modbus 기능 코드(01-06, 15-16 등)를 사람이 읽을 수 있는 형태로 해석합니다
- 각 기능 코드에 따른 요청/응답 데이터의 의미를 설명합니다
- 레지스터 주소와 값을 10진수와 16진수로 표시합니다
- 예외 응답 코드를 감지하고 오류 내용을 설명합니다

### 5. 데이터 내보내기 및 저장
- 캡처된 통신 로그를 CSV, JSON 형식으로 내보낼 수 있습니다
- 세션별로 통신 내용을 로컬 스토리지에 자동 저장합니다
- 저장된 세션을 불러와서 오프라인으로 분석할 수 있습니다
- 패킷 통계(총 패킷 수, 오류율, 응답 시간 등)를 제공합니다

## User Experience

### 사용자 페르소나
1. **현장 엔지니어**: Modbus 장비 설치 및 문제 해결을 담당하는 기술자
2. **시스템 통합 개발자**: 여러 Modbus 장비를 연동하는 시스템을 개발하는 프로그래머
3. **유지보수 담당자**: 기존 시스템의 정기 점검 및 문제 진단을 수행하는 직원

### 주요 사용자 플로우
1. **초기 연결 플로우**
   - 웹 애플리케이션 접속 → 시리얼 포트 선택 → 통신 파라미터 설정 → 연결 시작

2. **모니터링 플로우**
   - 실시간 패킷 확인 → 필터 적용 → 상세 정보 확인 → 문제 패킷 식별

3. **분석 플로우**
   - 로그 일시정지 → 특정 패킷 선택 → 상세 분석 → 결과 내보내기

### UI/UX 고려사항
- 다크/라이트 테마 지원으로 다양한 환경에서 편안한 사용
- 반응형 디자인으로 태블릿 및 모바일 기기에서도 사용 가능
- 키보드 단축키 지원으로 빠른 조작 가능
- 실시간 업데이트 시에도 부드러운 스크롤 유지

## Technical Architecture

### 시스템 컴포넌트
1. **Frontend (SPA)**
   - React 또는 Vue.js 기반의 Single Page Application
   - Web Serial API를 통한 시리얼 통신 처리
   - Service Worker를 통한 PWA 기능 구현
   - IndexedDB를 활용한 로컬 데이터 저장

2. **Modbus Parser Module**
   - 바이너리 데이터 스트림 처리 엔진
   - CRC16 계산 및 검증 로직
   - 패킷 경계 감지 알고리즘
   - 기능 코드별 파싱 규칙 엔진

3. **Data Management Layer**
   - 패킷 버퍼 관리 시스템
   - 실시간 필터링 엔진
   - 세션 데이터 저장/복원 기능
   - 통계 데이터 집계 모듈

### 데이터 모델
```
Packet {
  id: string
  timestamp: Date
  direction: 'TX' | 'RX'
  rawData: Uint8Array
  parsedData: {
    slaveAddress: number
    functionCode: number
    data: Uint8Array
    crc: number
    isValid: boolean
  }
  interpretation: string
}

Session {
  id: string
  startTime: Date
  endTime: Date
  connectionParams: SerialOptions
  packets: Packet[]
  statistics: Statistics
}
```

### API 및 통합
- Web Serial API: 브라우저와 시리얼 포트 간 통신
- File API: 로그 파일 내보내기/가져오기
- Clipboard API: 패킷 데이터 복사 기능
- Web Workers: 대용량 데이터 처리 시 UI 블로킹 방지

## Development Roadmap

### Phase 1: MVP (핵심 기능)
1. Web Serial API를 통한 기본 시리얼 통신 구현
2. 간단한 UI로 포트 선택 및 연결 기능
3. 원시 데이터 표시 (HEX 형식)
4. 기본적인 Modbus-RTU 패킷 파싱 (슬레이브 주소, 기능 코드, CRC)
5. 실시간 패킷 로그 표시

### Phase 2: 향상된 모니터링
1. 상세한 패킷 해석 기능 추가
2. 필터링 및 검색 기능 구현
3. 패킷 타이밍 분석 기능
4. 다크/라이트 테마 구현
5. 기본 통계 정보 표시

### Phase 3: 고급 기능
1. PWA 기능 구현 (오프라인 사용 가능)
2. 세션 저장 및 복원 기능
3. 데이터 내보내기 기능 (CSV, JSON)
4. 사용자 정의 패킷 해석 규칙
5. 다국어 지원

### Phase 4: 전문가 도구
1. 패킷 재생 기능
2. 프로토콜 분석 리포트 생성
3. 커스텀 스크립트 지원
4. 팀 협업 기능 (세션 공유)
5. 플러그인 시스템

## Logical Dependency Chain

1. **기초 인프라 구축**
   - 프로젝트 구조 설정 및 빌드 환경 구성
   - Web Serial API 연동 기본 코드 작성
   - 기본 UI 프레임워크 설정

2. **핵심 통신 기능**
   - 시리얼 포트 열기/닫기 기능
   - 데이터 수신 이벤트 처리
   - 바이너리 데이터 버퍼 관리

3. **Modbus 파싱 엔진**
   - CRC16 계산 알고리즘 구현
   - 패킷 경계 감지 로직
   - 기본 패킷 구조 파싱

4. **사용자 인터페이스**
   - 연결 상태 표시
   - 실시간 로그 뷰어
   - 패킷 상세 정보 표시

5. **고급 기능 추가**
   - 필터링 시스템
   - 데이터 저장/내보내기
   - PWA 변환

## Risks and Mitigations

### 기술적 도전 과제
1. **Web Serial API 브라우저 호환성**
   - 위험: 일부 브라우저에서 지원하지 않음
   - 완화: Chrome/Edge 우선 지원, 다른 브라우저 사용자에게 명확한 안내 제공

2. **실시간 데이터 처리 성능**
   - 위험: 높은 통신 속도에서 UI 렉 발생 가능
   - 완화: Web Workers 활용, 가상 스크롤링 구현, 데이터 청크 처리

3. **패킷 경계 감지 정확도**
   - 위험: 노이즈가 많은 환경에서 잘못된 패킷 구분
   - 완화: 적응형 타임아웃 알고리즘, 사용자 조정 가능한 파라미터

### MVP 범위 설정
- 초기에는 가장 일반적인 Modbus 기능 코드(01-06)만 지원
- 복잡한 UI 기능은 후순위로 미룸
- 기본적인 모니터링 기능에 집중

### 리소스 제약
- 단일 개발자 환경 고려한 단계적 개발
- 오픈소스 라이브러리 적극 활용
- 커뮤니티 피드백을 통한 우선순위 조정

## Appendix

### Modbus-RTU 프로토콜 사양
- RTU 프레임 형식: [슬레이브 주소(1) | 기능 코드(1) | 데이터(n) | CRC(2)]
- 주요 기능 코드:
  - 01: Read Coils
  - 02: Read Discrete Inputs
  - 03: Read Holding Registers
  - 04: Read Input Registers
  - 05: Write Single Coil
  - 06: Write Single Register
  - 15: Write Multiple Coils
  - 16: Write Multiple Registers

### 참고 자료
- Web Serial API 명세: https://wicg.github.io/serial/
- Modbus 프로토콜 사양: https://modbus.org/specs.php
- PWA 개발 가이드: https://web.dev/progressive-web-apps/

### 경쟁 제품 분석
- 데스크톱 기반 도구들의 장단점
- 웹 기반 솔루션의 차별화 포인트
- 사용자 피드백 및 요구사항 수집 결과
