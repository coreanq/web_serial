# Task ID: 7
# Title: Implement Packet Transmission Feature
# Status: pending
# Dependencies: 3, 4, 5
# Priority: medium
# Description: Create functionality to allow users to send custom Modbus packets
# Details:
Implement a UI component to allow users to create and send custom Modbus packets. Provide input fields for device address, function code, and data. Add support for common Modbus functions (read coils, read discrete inputs, read holding registers, read input registers, write single coil, write single register, write multiple coils, write multiple registers). Automatically calculate and append CRC/LRC. Provide a send button to transmit the packet. Show a preview of the packet before sending:

```javascript
function sendCustomPacket() {
  const packet = {
    address: parseInt(addressInput.value),
    functionCode: parseInt(functionCodeInput.value),
    data: parseDataInput(dataInput.value)
  };
  
  // Create binary packet based on protocol
  let binaryPacket;
  if (currentProtocol === 'RTU') {
    binaryPacket = createRTUPacket(packet);
  } else {
    binaryPacket = createASCIIPacket(packet);
  }
  
  // Send the packet through the current connection
  if (serialConnected) {
    sendSerialData(binaryPacket);
  } else if (tcpConnected) {
    sendTCPData(binaryPacket);
  } else {
    showError('No active connection');
  }
}

function createRTUPacket(packet) {
  // Create RTU packet with CRC
  // ...
}

function createASCIIPacket(packet) {
  // Create ASCII packet with LRC
  // ...
}
```

# Test Strategy:
Test sending various Modbus packets. Verify that packets are correctly formatted with proper CRC/LRC. Test with different function codes to ensure proper data formatting. Verify that the UI updates to show sent packets.
