# Task ID: 3
# Title: Implement Modbus RTU Protocol Parser
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Develop a parser for Modbus RTU protocol to interpret serial data
# Details:
Implement a Modbus RTU protocol parser that can decode incoming data frames. The parser should handle message framing with start/end detection, CRC validation, and extraction of address, function code, data, and error checking fields. Create data structures to represent Modbus RTU packets. Implement functions to validate packet integrity. The implementation should follow the Modbus RTU specification, including:

```javascript
class ModbusRTUParser {
  parseFrame(buffer) {
    // Minimum Modbus RTU frame is 4 bytes (address, function code, 2 CRC bytes)
    if (buffer.length < 4) return null;
    
    const address = buffer[0];
    const functionCode = buffer[1];
    const data = buffer.slice(2, buffer.length - 2);
    const receivedCRC = (buffer[buffer.length - 1] << 8) | buffer[buffer.length - 2];
    const calculatedCRC = this.calculateCRC16(buffer.slice(0, buffer.length - 2));
    
    const isValid = receivedCRC === calculatedCRC;
    
    return {
      address,
      functionCode,
      data,
      crc: receivedCRC,
      isValid
    };
  }
  
  calculateCRC16(buffer) {
    // Implementation of Modbus CRC-16 algorithm
    // ...
  }
}
```

# Test Strategy:
Test with sample Modbus RTU packets to verify correct parsing. Verify CRC calculation with known good packets. Test with malformed packets to ensure proper error handling. Create unit tests with various Modbus function codes.
